<?php
/**
 * Workflow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * Workflow Class Doc Comment
 *
 * @category Class
 * @description A Workflow is an automation on the Catalytic platform. It is a template  of the process you want to run each time your Workflow is started.
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Workflow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Workflow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'teamName' => 'string',
        'description' => 'string',
        'category' => 'string',
        'owner' => 'string',
        'createdBy' => 'string',
        'inputFields' => '\Catalytic\SDK\Model\Field[]',
        'isPublished' => 'bool',
        'isArchived' => 'bool',
        'fieldVisibility' => '\Catalytic\SDK\Model\FieldVisibility',
        'instanceVisibility' => '\Catalytic\SDK\Model\InstanceVisibilty',
        'adminUsers' => 'string[]',
        'standardUsers' => 'string[]',
        'taskCountLimit' => 'int',
        'fieldCountLimit' => 'int',
        'fieldSizeLimit' => 'int',
        'fieldTotalSizeLimit' => 'int',
        'dataTableRowLimit' => 'int',
        'dataTableColumnLimit' => 'int',
        'dataTableCellLimit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'teamName' => null,
        'description' => null,
        'category' => null,
        'owner' => null,
        'createdBy' => null,
        'inputFields' => null,
        'isPublished' => null,
        'isArchived' => null,
        'fieldVisibility' => null,
        'instanceVisibility' => null,
        'adminUsers' => null,
        'standardUsers' => null,
        'taskCountLimit' => 'int32',
        'fieldCountLimit' => 'int32',
        'fieldSizeLimit' => 'int32',
        'fieldTotalSizeLimit' => 'int32',
        'dataTableRowLimit' => 'int32',
        'dataTableColumnLimit' => 'int32',
        'dataTableCellLimit' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'teamName' => 'teamName',
        'description' => 'description',
        'category' => 'category',
        'owner' => 'owner',
        'createdBy' => 'createdBy',
        'inputFields' => 'inputFields',
        'isPublished' => 'isPublished',
        'isArchived' => 'isArchived',
        'fieldVisibility' => 'fieldVisibility',
        'instanceVisibility' => 'instanceVisibility',
        'adminUsers' => 'adminUsers',
        'standardUsers' => 'standardUsers',
        'taskCountLimit' => 'taskCountLimit',
        'fieldCountLimit' => 'fieldCountLimit',
        'fieldSizeLimit' => 'fieldSizeLimit',
        'fieldTotalSizeLimit' => 'fieldTotalSizeLimit',
        'dataTableRowLimit' => 'dataTableRowLimit',
        'dataTableColumnLimit' => 'dataTableColumnLimit',
        'dataTableCellLimit' => 'dataTableCellLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'teamName' => 'setTeamName',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'owner' => 'setOwner',
        'createdBy' => 'setCreatedBy',
        'inputFields' => 'setInputFields',
        'isPublished' => 'setIsPublished',
        'isArchived' => 'setIsArchived',
        'fieldVisibility' => 'setFieldVisibility',
        'instanceVisibility' => 'setInstanceVisibility',
        'adminUsers' => 'setAdminUsers',
        'standardUsers' => 'setStandardUsers',
        'taskCountLimit' => 'setTaskCountLimit',
        'fieldCountLimit' => 'setFieldCountLimit',
        'fieldSizeLimit' => 'setFieldSizeLimit',
        'fieldTotalSizeLimit' => 'setFieldTotalSizeLimit',
        'dataTableRowLimit' => 'setDataTableRowLimit',
        'dataTableColumnLimit' => 'setDataTableColumnLimit',
        'dataTableCellLimit' => 'setDataTableCellLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'teamName' => 'getTeamName',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'owner' => 'getOwner',
        'createdBy' => 'getCreatedBy',
        'inputFields' => 'getInputFields',
        'isPublished' => 'getIsPublished',
        'isArchived' => 'getIsArchived',
        'fieldVisibility' => 'getFieldVisibility',
        'instanceVisibility' => 'getInstanceVisibility',
        'adminUsers' => 'getAdminUsers',
        'standardUsers' => 'getStandardUsers',
        'taskCountLimit' => 'getTaskCountLimit',
        'fieldCountLimit' => 'getFieldCountLimit',
        'fieldSizeLimit' => 'getFieldSizeLimit',
        'fieldTotalSizeLimit' => 'getFieldTotalSizeLimit',
        'dataTableRowLimit' => 'getDataTableRowLimit',
        'dataTableColumnLimit' => 'getDataTableColumnLimit',
        'dataTableCellLimit' => 'getDataTableCellLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['teamName'] = isset($data['teamName']) ? $data['teamName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['inputFields'] = isset($data['inputFields']) ? $data['inputFields'] : null;
        $this->container['isPublished'] = isset($data['isPublished']) ? $data['isPublished'] : null;
        $this->container['isArchived'] = isset($data['isArchived']) ? $data['isArchived'] : null;
        $this->container['fieldVisibility'] = isset($data['fieldVisibility']) ? $data['fieldVisibility'] : null;
        $this->container['instanceVisibility'] = isset($data['instanceVisibility']) ? $data['instanceVisibility'] : null;
        $this->container['adminUsers'] = isset($data['adminUsers']) ? $data['adminUsers'] : null;
        $this->container['standardUsers'] = isset($data['standardUsers']) ? $data['standardUsers'] : null;
        $this->container['taskCountLimit'] = isset($data['taskCountLimit']) ? $data['taskCountLimit'] : null;
        $this->container['fieldCountLimit'] = isset($data['fieldCountLimit']) ? $data['fieldCountLimit'] : null;
        $this->container['fieldSizeLimit'] = isset($data['fieldSizeLimit']) ? $data['fieldSizeLimit'] : null;
        $this->container['fieldTotalSizeLimit'] = isset($data['fieldTotalSizeLimit']) ? $data['fieldTotalSizeLimit'] : null;
        $this->container['dataTableRowLimit'] = isset($data['dataTableRowLimit']) ? $data['dataTableRowLimit'] : null;
        $this->container['dataTableColumnLimit'] = isset($data['dataTableColumnLimit']) ? $data['dataTableColumnLimit'] : null;
        $this->container['dataTableCellLimit'] = isset($data['dataTableCellLimit']) ? $data['dataTableCellLimit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['teamName'] === null) {
            $invalidProperties[] = "'teamName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the Workflow
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The descriptive name of the Workflow
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets teamName
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['teamName'];
    }

    /**
     * Sets teamName
     *
     * @param string $teamName The name of the team in which the Workflow is defined
     *
     * @return $this
     */
    public function setTeamName($teamName)
    {
        $this->container['teamName'] = $teamName;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of what the Workflow does
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category A descriptive grouping for your Workflow
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner The email address of the user who owns this Workflow
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string|null $createdBy The email address of the user who created this Workflow
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets inputFields
     *
     * @return \Catalytic\SDK\Model\Field[]|null
     */
    public function getInputFields()
    {
        return $this->container['inputFields'];
    }

    /**
     * Sets inputFields
     *
     * @param \Catalytic\SDK\Model\Field[]|null $inputFields A collection of the required and optional input fields  that can be passed to this Workflow when starting it.
     *
     * @return $this
     */
    public function setInputFields($inputFields)
    {
        $this->container['inputFields'] = $inputFields;

        return $this;
    }

    /**
     * Gets isPublished
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['isPublished'];
    }

    /**
     * Sets isPublished
     *
     * @param bool|null $isPublished Indicates whether the Workflow is published; if false, Workflow is in draft mode
     *
     * @return $this
     */
    public function setIsPublished($isPublished)
    {
        $this->container['isPublished'] = $isPublished;

        return $this;
    }

    /**
     * Gets isArchived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['isArchived'];
    }

    /**
     * Sets isArchived
     *
     * @param bool|null $isArchived Indicates whether is Archived and no longer available for users to find, start or edit.
     *
     * @return $this
     */
    public function setIsArchived($isArchived)
    {
        $this->container['isArchived'] = $isArchived;

        return $this;
    }

    /**
     * Gets fieldVisibility
     *
     * @return \Catalytic\SDK\Model\FieldVisibility|null
     */
    public function getFieldVisibility()
    {
        return $this->container['fieldVisibility'];
    }

    /**
     * Sets fieldVisibility
     *
     * @param \Catalytic\SDK\Model\FieldVisibility|null $fieldVisibility fieldVisibility
     *
     * @return $this
     */
    public function setFieldVisibility($fieldVisibility)
    {
        $this->container['fieldVisibility'] = $fieldVisibility;

        return $this;
    }

    /**
     * Gets instanceVisibility
     *
     * @return \Catalytic\SDK\Model\InstanceVisibilty|null
     */
    public function getInstanceVisibility()
    {
        return $this->container['instanceVisibility'];
    }

    /**
     * Sets instanceVisibility
     *
     * @param \Catalytic\SDK\Model\InstanceVisibilty|null $instanceVisibility instanceVisibility
     *
     * @return $this
     */
    public function setInstanceVisibility($instanceVisibility)
    {
        $this->container['instanceVisibility'] = $instanceVisibility;

        return $this;
    }

    /**
     * Gets adminUsers
     *
     * @return string[]|null
     */
    public function getAdminUsers()
    {
        return $this->container['adminUsers'];
    }

    /**
     * Sets adminUsers
     *
     * @param string[]|null $adminUsers The users who may view, start, and edit this Workflow in addition to Catalytic.Sdk.Entities.Workflow.Owner
     *
     * @return $this
     */
    public function setAdminUsers($adminUsers)
    {
        $this->container['adminUsers'] = $adminUsers;

        return $this;
    }

    /**
     * Gets standardUsers
     *
     * @return string[]|null
     */
    public function getStandardUsers()
    {
        return $this->container['standardUsers'];
    }

    /**
     * Sets standardUsers
     *
     * @param string[]|null $standardUsers The users who can view and start this Workflow
     *
     * @return $this
     */
    public function setStandardUsers($standardUsers)
    {
        $this->container['standardUsers'] = $standardUsers;

        return $this;
    }

    /**
     * Gets taskCountLimit
     *
     * @return int|null
     */
    public function getTaskCountLimit()
    {
        return $this->container['taskCountLimit'];
    }

    /**
     * Sets taskCountLimit
     *
     * @param int|null $taskCountLimit The maximum number of steps that can appear in an Instance of this Workflow
     *
     * @return $this
     */
    public function setTaskCountLimit($taskCountLimit)
    {
        $this->container['taskCountLimit'] = $taskCountLimit;

        return $this;
    }

    /**
     * Gets fieldCountLimit
     *
     * @return int|null
     */
    public function getFieldCountLimit()
    {
        return $this->container['fieldCountLimit'];
    }

    /**
     * Sets fieldCountLimit
     *
     * @param int|null $fieldCountLimit The maximum number of fields that can appear in an Instance of this Workflow
     *
     * @return $this
     */
    public function setFieldCountLimit($fieldCountLimit)
    {
        $this->container['fieldCountLimit'] = $fieldCountLimit;

        return $this;
    }

    /**
     * Gets fieldSizeLimit
     *
     * @return int|null
     */
    public function getFieldSizeLimit()
    {
        return $this->container['fieldSizeLimit'];
    }

    /**
     * Sets fieldSizeLimit
     *
     * @param int|null $fieldSizeLimit The maximum size of data stored in any field in an Instance of this Workflow
     *
     * @return $this
     */
    public function setFieldSizeLimit($fieldSizeLimit)
    {
        $this->container['fieldSizeLimit'] = $fieldSizeLimit;

        return $this;
    }

    /**
     * Gets fieldTotalSizeLimit
     *
     * @return int|null
     */
    public function getFieldTotalSizeLimit()
    {
        return $this->container['fieldTotalSizeLimit'];
    }

    /**
     * Sets fieldTotalSizeLimit
     *
     * @param int|null $fieldTotalSizeLimit The maximum total size of data stored in all fields in an Instance of this Workflow
     *
     * @return $this
     */
    public function setFieldTotalSizeLimit($fieldTotalSizeLimit)
    {
        $this->container['fieldTotalSizeLimit'] = $fieldTotalSizeLimit;

        return $this;
    }

    /**
     * Gets dataTableRowLimit
     *
     * @return int|null
     */
    public function getDataTableRowLimit()
    {
        return $this->container['dataTableRowLimit'];
    }

    /**
     * Sets dataTableRowLimit
     *
     * @param int|null $dataTableRowLimit The maximum number of rows of any data table created in an Instance of this Workflow
     *
     * @return $this
     */
    public function setDataTableRowLimit($dataTableRowLimit)
    {
        $this->container['dataTableRowLimit'] = $dataTableRowLimit;

        return $this;
    }

    /**
     * Gets dataTableColumnLimit
     *
     * @return int|null
     */
    public function getDataTableColumnLimit()
    {
        return $this->container['dataTableColumnLimit'];
    }

    /**
     * Sets dataTableColumnLimit
     *
     * @param int|null $dataTableColumnLimit The maximum number of columns of any data table created in an Instance of this Workflow
     *
     * @return $this
     */
    public function setDataTableColumnLimit($dataTableColumnLimit)
    {
        $this->container['dataTableColumnLimit'] = $dataTableColumnLimit;

        return $this;
    }

    /**
     * Gets dataTableCellLimit
     *
     * @return int|null
     */
    public function getDataTableCellLimit()
    {
        return $this->container['dataTableCellLimit'];
    }

    /**
     * Sets dataTableCellLimit
     *
     * @param int|null $dataTableCellLimit The maximum number of cells of any data table created in an Instance of this Workflow
     *
     * @return $this
     */
    public function setDataTableCellLimit($dataTableCellLimit)
    {
        $this->container['dataTableCellLimit'] = $dataTableCellLimit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


