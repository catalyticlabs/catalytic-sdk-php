<?php
/**
 * ActionInvocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * ActionInvocation Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ActionInvocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActionInvocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inputs' => '\Catalytic\SDK\Model\ActionInput[]',
        'outputs' => '\Catalytic\SDK\Model\ActionOutput[]',
        'id' => 'string',
        'teamName' => 'string',
        'requiredWorkerTags' => 'string[]',
        'actionId' => 'string',
        'completedByWorkerId' => 'string',
        'expirationTime' => '\DateTime',
        'completedTime' => '\DateTime',
        'isCompleted' => 'bool',
        'metadata' => 'string',
        'referenceName' => 'string',
        'integrationConnectionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'inputs' => null,
        'outputs' => null,
        'id' => 'uuid',
        'teamName' => null,
        'requiredWorkerTags' => null,
        'actionId' => 'uuid',
        'completedByWorkerId' => 'uuid',
        'expirationTime' => 'date-time',
        'completedTime' => 'date-time',
        'isCompleted' => null,
        'metadata' => null,
        'referenceName' => null,
        'integrationConnectionId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inputs' => 'inputs',
        'outputs' => 'outputs',
        'id' => 'id',
        'teamName' => 'teamName',
        'requiredWorkerTags' => 'requiredWorkerTags',
        'actionId' => 'actionId',
        'completedByWorkerId' => 'completedByWorkerId',
        'expirationTime' => 'expirationTime',
        'completedTime' => 'completedTime',
        'isCompleted' => 'isCompleted',
        'metadata' => 'metadata',
        'referenceName' => 'referenceName',
        'integrationConnectionId' => 'integrationConnectionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inputs' => 'setInputs',
        'outputs' => 'setOutputs',
        'id' => 'setId',
        'teamName' => 'setTeamName',
        'requiredWorkerTags' => 'setRequiredWorkerTags',
        'actionId' => 'setActionId',
        'completedByWorkerId' => 'setCompletedByWorkerId',
        'expirationTime' => 'setExpirationTime',
        'completedTime' => 'setCompletedTime',
        'isCompleted' => 'setIsCompleted',
        'metadata' => 'setMetadata',
        'referenceName' => 'setReferenceName',
        'integrationConnectionId' => 'setIntegrationConnectionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inputs' => 'getInputs',
        'outputs' => 'getOutputs',
        'id' => 'getId',
        'teamName' => 'getTeamName',
        'requiredWorkerTags' => 'getRequiredWorkerTags',
        'actionId' => 'getActionId',
        'completedByWorkerId' => 'getCompletedByWorkerId',
        'expirationTime' => 'getExpirationTime',
        'completedTime' => 'getCompletedTime',
        'isCompleted' => 'getIsCompleted',
        'metadata' => 'getMetadata',
        'referenceName' => 'getReferenceName',
        'integrationConnectionId' => 'getIntegrationConnectionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['outputs'] = isset($data['outputs']) ? $data['outputs'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['teamName'] = isset($data['teamName']) ? $data['teamName'] : null;
        $this->container['requiredWorkerTags'] = isset($data['requiredWorkerTags']) ? $data['requiredWorkerTags'] : null;
        $this->container['actionId'] = isset($data['actionId']) ? $data['actionId'] : null;
        $this->container['completedByWorkerId'] = isset($data['completedByWorkerId']) ? $data['completedByWorkerId'] : null;
        $this->container['expirationTime'] = isset($data['expirationTime']) ? $data['expirationTime'] : null;
        $this->container['completedTime'] = isset($data['completedTime']) ? $data['completedTime'] : null;
        $this->container['isCompleted'] = isset($data['isCompleted']) ? $data['isCompleted'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['referenceName'] = isset($data['referenceName']) ? $data['referenceName'] : null;
        $this->container['integrationConnectionId'] = isset($data['integrationConnectionId']) ? $data['integrationConnectionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inputs
     *
     * @return \Catalytic\SDK\Model\ActionInput[]|null
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Catalytic\SDK\Model\ActionInput[]|null $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets outputs
     *
     * @return \Catalytic\SDK\Model\ActionOutput[]|null
     */
    public function getOutputs()
    {
        return $this->container['outputs'];
    }

    /**
     * Sets outputs
     *
     * @param \Catalytic\SDK\Model\ActionOutput[]|null $outputs outputs
     *
     * @return $this
     */
    public function setOutputs($outputs)
    {
        $this->container['outputs'] = $outputs;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets teamName
     *
     * @return string|null
     */
    public function getTeamName()
    {
        return $this->container['teamName'];
    }

    /**
     * Sets teamName
     *
     * @param string|null $teamName teamName
     *
     * @return $this
     */
    public function setTeamName($teamName)
    {
        $this->container['teamName'] = $teamName;

        return $this;
    }

    /**
     * Gets requiredWorkerTags
     *
     * @return string[]|null
     */
    public function getRequiredWorkerTags()
    {
        return $this->container['requiredWorkerTags'];
    }

    /**
     * Sets requiredWorkerTags
     *
     * @param string[]|null $requiredWorkerTags requiredWorkerTags
     *
     * @return $this
     */
    public function setRequiredWorkerTags($requiredWorkerTags)
    {
        $this->container['requiredWorkerTags'] = $requiredWorkerTags;

        return $this;
    }

    /**
     * Gets actionId
     *
     * @return string|null
     */
    public function getActionId()
    {
        return $this->container['actionId'];
    }

    /**
     * Sets actionId
     *
     * @param string|null $actionId actionId
     *
     * @return $this
     */
    public function setActionId($actionId)
    {
        $this->container['actionId'] = $actionId;

        return $this;
    }

    /**
     * Gets completedByWorkerId
     *
     * @return string|null
     */
    public function getCompletedByWorkerId()
    {
        return $this->container['completedByWorkerId'];
    }

    /**
     * Sets completedByWorkerId
     *
     * @param string|null $completedByWorkerId completedByWorkerId
     *
     * @return $this
     */
    public function setCompletedByWorkerId($completedByWorkerId)
    {
        $this->container['completedByWorkerId'] = $completedByWorkerId;

        return $this;
    }

    /**
     * Gets expirationTime
     *
     * @return \DateTime|null
     */
    public function getExpirationTime()
    {
        return $this->container['expirationTime'];
    }

    /**
     * Sets expirationTime
     *
     * @param \DateTime|null $expirationTime expirationTime
     *
     * @return $this
     */
    public function setExpirationTime($expirationTime)
    {
        $this->container['expirationTime'] = $expirationTime;

        return $this;
    }

    /**
     * Gets completedTime
     *
     * @return \DateTime|null
     */
    public function getCompletedTime()
    {
        return $this->container['completedTime'];
    }

    /**
     * Sets completedTime
     *
     * @param \DateTime|null $completedTime completedTime
     *
     * @return $this
     */
    public function setCompletedTime($completedTime)
    {
        $this->container['completedTime'] = $completedTime;

        return $this;
    }

    /**
     * Gets isCompleted
     *
     * @return bool|null
     */
    public function getIsCompleted()
    {
        return $this->container['isCompleted'];
    }

    /**
     * Sets isCompleted
     *
     * @param bool|null $isCompleted isCompleted
     *
     * @return $this
     */
    public function setIsCompleted($isCompleted)
    {
        $this->container['isCompleted'] = $isCompleted;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A JSON-formatted meta data. This meta data is passed along unmodified to the   action implementation when an action task is executed
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets referenceName
     *
     * @return string|null
     */
    public function getReferenceName()
    {
        return $this->container['referenceName'];
    }

    /**
     * Sets referenceName
     *
     * @param string|null $referenceName referenceName
     *
     * @return $this
     */
    public function setReferenceName($referenceName)
    {
        $this->container['referenceName'] = $referenceName;

        return $this;
    }

    /**
     * Gets integrationConnectionId
     *
     * @return string|null
     */
    public function getIntegrationConnectionId()
    {
        return $this->container['integrationConnectionId'];
    }

    /**
     * Sets integrationConnectionId
     *
     * @param string|null $integrationConnectionId The Id IntegrationConnection attached to this Invocation
     *
     * @return $this
     */
    public function setIntegrationConnectionId($integrationConnectionId)
    {
        $this->container['integrationConnectionId'] = $integrationConnectionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


