<?php
/**
 * InvokeActionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * InvokeActionRequest Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvokeActionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvokeActionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actionId' => 'string',
        'inputs' => '\Catalytic\SDK\Model\ActionInput[]',
        'requiredWorkerTags' => 'string[]',
        'lifetimeSeconds' => 'int',
        'metadata' => 'string',
        'integrationConnectionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'actionId' => 'uuid',
        'inputs' => null,
        'requiredWorkerTags' => null,
        'lifetimeSeconds' => 'int32',
        'metadata' => null,
        'integrationConnectionId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actionId' => 'actionId',
        'inputs' => 'inputs',
        'requiredWorkerTags' => 'requiredWorkerTags',
        'lifetimeSeconds' => 'lifetimeSeconds',
        'metadata' => 'metadata',
        'integrationConnectionId' => 'integrationConnectionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actionId' => 'setActionId',
        'inputs' => 'setInputs',
        'requiredWorkerTags' => 'setRequiredWorkerTags',
        'lifetimeSeconds' => 'setLifetimeSeconds',
        'metadata' => 'setMetadata',
        'integrationConnectionId' => 'setIntegrationConnectionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actionId' => 'getActionId',
        'inputs' => 'getInputs',
        'requiredWorkerTags' => 'getRequiredWorkerTags',
        'lifetimeSeconds' => 'getLifetimeSeconds',
        'metadata' => 'getMetadata',
        'integrationConnectionId' => 'getIntegrationConnectionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actionId'] = isset($data['actionId']) ? $data['actionId'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['requiredWorkerTags'] = isset($data['requiredWorkerTags']) ? $data['requiredWorkerTags'] : null;
        $this->container['lifetimeSeconds'] = isset($data['lifetimeSeconds']) ? $data['lifetimeSeconds'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['integrationConnectionId'] = isset($data['integrationConnectionId']) ? $data['integrationConnectionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actionId
     *
     * @return string|null
     */
    public function getActionId()
    {
        return $this->container['actionId'];
    }

    /**
     * Sets actionId
     *
     * @param string|null $actionId actionId
     *
     * @return $this
     */
    public function setActionId($actionId)
    {
        $this->container['actionId'] = $actionId;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \Catalytic\SDK\Model\ActionInput[]|null
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Catalytic\SDK\Model\ActionInput[]|null $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets requiredWorkerTags
     *
     * @return string[]|null
     */
    public function getRequiredWorkerTags()
    {
        return $this->container['requiredWorkerTags'];
    }

    /**
     * Sets requiredWorkerTags
     *
     * @param string[]|null $requiredWorkerTags requiredWorkerTags
     *
     * @return $this
     */
    public function setRequiredWorkerTags($requiredWorkerTags)
    {
        $this->container['requiredWorkerTags'] = $requiredWorkerTags;

        return $this;
    }

    /**
     * Gets lifetimeSeconds
     *
     * @return int|null
     */
    public function getLifetimeSeconds()
    {
        return $this->container['lifetimeSeconds'];
    }

    /**
     * Sets lifetimeSeconds
     *
     * @param int|null $lifetimeSeconds lifetimeSeconds
     *
     * @return $this
     */
    public function setLifetimeSeconds($lifetimeSeconds)
    {
        $this->container['lifetimeSeconds'] = $lifetimeSeconds;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A JSON-formatted meta data. This meta data is passed along unmodified to the   action implementation when an action task is executed
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets integrationConnectionId
     *
     * @return string|null
     */
    public function getIntegrationConnectionId()
    {
        return $this->container['integrationConnectionId'];
    }

    /**
     * Sets integrationConnectionId
     *
     * @param string|null $integrationConnectionId integrationConnectionId
     *
     * @return $this
     */
    public function setIntegrationConnectionId($integrationConnectionId)
    {
        $this->container['integrationConnectionId'] = $integrationConnectionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


