<?php
/**
 * Instance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * Instance Class Doc Comment
 *
 * @category Class
 * @description Represents an Instance of a Workflow
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Instance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'workflowId' => 'string',
        'rootInstanceId' => 'string',
        'name' => 'string',
        'teamName' => 'string',
        'description' => 'string',
        'category' => 'string',
        'isTest' => 'bool',
        'ownerEmail' => 'string',
        'createdByEmail' => 'string',
        'fields' => '\Catalytic\SDK\Model\Field[]',
        'status' => '\Catalytic\SDK\Model\InstanceStatus',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'fieldVisibility' => '\Catalytic\SDK\Model\FieldVisibility',
        'visibility' => '\Catalytic\SDK\Model\InstanceVisibility',
        'visibleToUserEmails' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'workflowId' => 'uuid',
        'rootInstanceId' => 'uuid',
        'name' => null,
        'teamName' => null,
        'description' => null,
        'category' => null,
        'isTest' => null,
        'ownerEmail' => null,
        'createdByEmail' => null,
        'fields' => null,
        'status' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'fieldVisibility' => null,
        'visibility' => null,
        'visibleToUserEmails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'workflowId' => 'workflowId',
        'rootInstanceId' => 'rootInstanceId',
        'name' => 'name',
        'teamName' => 'teamName',
        'description' => 'description',
        'category' => 'category',
        'isTest' => 'isTest',
        'ownerEmail' => 'ownerEmail',
        'createdByEmail' => 'createdByEmail',
        'fields' => 'fields',
        'status' => 'status',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'fieldVisibility' => 'fieldVisibility',
        'visibility' => 'visibility',
        'visibleToUserEmails' => 'visibleToUserEmails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'workflowId' => 'setWorkflowId',
        'rootInstanceId' => 'setRootInstanceId',
        'name' => 'setName',
        'teamName' => 'setTeamName',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'isTest' => 'setIsTest',
        'ownerEmail' => 'setOwnerEmail',
        'createdByEmail' => 'setCreatedByEmail',
        'fields' => 'setFields',
        'status' => 'setStatus',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'fieldVisibility' => 'setFieldVisibility',
        'visibility' => 'setVisibility',
        'visibleToUserEmails' => 'setVisibleToUserEmails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'workflowId' => 'getWorkflowId',
        'rootInstanceId' => 'getRootInstanceId',
        'name' => 'getName',
        'teamName' => 'getTeamName',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'isTest' => 'getIsTest',
        'ownerEmail' => 'getOwnerEmail',
        'createdByEmail' => 'getCreatedByEmail',
        'fields' => 'getFields',
        'status' => 'getStatus',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'fieldVisibility' => 'getFieldVisibility',
        'visibility' => 'getVisibility',
        'visibleToUserEmails' => 'getVisibleToUserEmails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['workflowId'] = isset($data['workflowId']) ? $data['workflowId'] : null;
        $this->container['rootInstanceId'] = isset($data['rootInstanceId']) ? $data['rootInstanceId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['teamName'] = isset($data['teamName']) ? $data['teamName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['isTest'] = isset($data['isTest']) ? $data['isTest'] : null;
        $this->container['ownerEmail'] = isset($data['ownerEmail']) ? $data['ownerEmail'] : null;
        $this->container['createdByEmail'] = isset($data['createdByEmail']) ? $data['createdByEmail'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['fieldVisibility'] = isset($data['fieldVisibility']) ? $data['fieldVisibility'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['visibleToUserEmails'] = isset($data['visibleToUserEmails']) ? $data['visibleToUserEmails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['workflowId'] === null) {
            $invalidProperties[] = "'workflowId' can't be null";
        }
        if ($this->container['rootInstanceId'] === null) {
            $invalidProperties[] = "'rootInstanceId' can't be null";
        }
        if ($this->container['teamName'] === null) {
            $invalidProperties[] = "'teamName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique ID of the Instance
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets workflowId
     *
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->container['workflowId'];
    }

    /**
     * Sets workflowId
     *
     * @param string $workflowId The unique ID of the Workflow this Instance was started from
     *
     * @return $this
     */
    public function setWorkflowId($workflowId)
    {
        $this->container['workflowId'] = $workflowId;

        return $this;
    }

    /**
     * Gets rootInstanceId
     *
     * @return string
     */
    public function getRootInstanceId()
    {
        return $this->container['rootInstanceId'];
    }

    /**
     * Sets rootInstanceId
     *
     * @param string $rootInstanceId The unique ID of the root workflow instance which this Instance was started from
     *
     * @return $this
     */
    public function setRootInstanceId($rootInstanceId)
    {
        $this->container['rootInstanceId'] = $rootInstanceId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The descriptive name of the Instance
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets teamName
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['teamName'];
    }

    /**
     * Sets teamName
     *
     * @param string $teamName The name of the Catalytic team in which this Instance was started
     *
     * @return $this
     */
    public function setTeamName($teamName)
    {
        $this->container['teamName'] = $teamName;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the Instance
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category A descriptive grouping for the Instance
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets isTest
     *
     * @return bool|null
     */
    public function getIsTest()
    {
        return $this->container['isTest'];
    }

    /**
     * Sets isTest
     *
     * @param bool|null $isTest Whether or not this instance was started as a test
     *
     * @return $this
     */
    public function setIsTest($isTest)
    {
        $this->container['isTest'] = $isTest;

        return $this;
    }

    /**
     * Gets ownerEmail
     *
     * @return string|null
     */
    public function getOwnerEmail()
    {
        return $this->container['ownerEmail'];
    }

    /**
     * Sets ownerEmail
     *
     * @param string|null $ownerEmail The email address of the user who owns this Instance
     *
     * @return $this
     */
    public function setOwnerEmail($ownerEmail)
    {
        $this->container['ownerEmail'] = $ownerEmail;

        return $this;
    }

    /**
     * Gets createdByEmail
     *
     * @return string|null
     */
    public function getCreatedByEmail()
    {
        return $this->container['createdByEmail'];
    }

    /**
     * Sets createdByEmail
     *
     * @param string|null $createdByEmail The email address of the user who created this Instance
     *
     * @return $this
     */
    public function setCreatedByEmail($createdByEmail)
    {
        $this->container['createdByEmail'] = $createdByEmail;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Catalytic\SDK\Model\Field[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Catalytic\SDK\Model\Field[]|null $fields A collection of the Fields belonging to this Instance
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Catalytic\SDK\Model\InstanceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Catalytic\SDK\Model\InstanceStatus|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate The start date of the instance
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The end date of the instance, or null if the step has not started
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets fieldVisibility
     *
     * @return \Catalytic\SDK\Model\FieldVisibility|null
     */
    public function getFieldVisibility()
    {
        return $this->container['fieldVisibility'];
    }

    /**
     * Sets fieldVisibility
     *
     * @param \Catalytic\SDK\Model\FieldVisibility|null $fieldVisibility fieldVisibility
     *
     * @return $this
     */
    public function setFieldVisibility($fieldVisibility)
    {
        $this->container['fieldVisibility'] = $fieldVisibility;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \Catalytic\SDK\Model\InstanceVisibility|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \Catalytic\SDK\Model\InstanceVisibility|null $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets visibleToUserEmails
     *
     * @return string[]|null
     */
    public function getVisibleToUserEmails()
    {
        return $this->container['visibleToUserEmails'];
    }

    /**
     * Sets visibleToUserEmails
     *
     * @param string[]|null $visibleToUserEmails The emails of users who can find and interact with this Instance
     *
     * @return $this
     */
    public function setVisibleToUserEmails($visibleToUserEmails)
    {
        $this->container['visibleToUserEmails'] = $visibleToUserEmails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


