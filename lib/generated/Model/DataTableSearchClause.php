<?php
/**
 * DataTableSearchClause
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * DataTableSearchClause Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataTableSearchClause implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataTableSearchClause';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'and' => '\Catalytic\SDK\Model\DataTableSearchClause[]',
        'or' => '\Catalytic\SDK\Model\DataTableSearchClause[]',
        'id' => '\Catalytic\SDK\Model\GuidSearchExpression',
        'name' => '\Catalytic\SDK\Model\StringSearchExpression',
        'isArchived' => '\Catalytic\SDK\Model\BoolSearchExpression',
        'createdByEmail' => '\Catalytic\SDK\Model\ExactStringSearchExpression',
        'createdDate' => '\Catalytic\SDK\Model\DateTimeSearchExpression'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'and' => null,
        'or' => null,
        'id' => null,
        'name' => null,
        'isArchived' => null,
        'createdByEmail' => null,
        'createdDate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'and' => 'and',
        'or' => 'or',
        'id' => 'id',
        'name' => 'name',
        'isArchived' => 'isArchived',
        'createdByEmail' => 'createdByEmail',
        'createdDate' => 'createdDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'and' => 'setAnd',
        'or' => 'setOr',
        'id' => 'setId',
        'name' => 'setName',
        'isArchived' => 'setIsArchived',
        'createdByEmail' => 'setCreatedByEmail',
        'createdDate' => 'setCreatedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'and' => 'getAnd',
        'or' => 'getOr',
        'id' => 'getId',
        'name' => 'getName',
        'isArchived' => 'getIsArchived',
        'createdByEmail' => 'getCreatedByEmail',
        'createdDate' => 'getCreatedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['and'] = isset($data['and']) ? $data['and'] : null;
        $this->container['or'] = isset($data['or']) ? $data['or'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['isArchived'] = isset($data['isArchived']) ? $data['isArchived'] : null;
        $this->container['createdByEmail'] = isset($data['createdByEmail']) ? $data['createdByEmail'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets and
     *
     * @return \Catalytic\SDK\Model\DataTableSearchClause[]|null
     */
    public function getAnd()
    {
        return $this->container['and'];
    }

    /**
     * Sets and
     *
     * @param \Catalytic\SDK\Model\DataTableSearchClause[]|null $and and
     *
     * @return $this
     */
    public function setAnd($and)
    {
        $this->container['and'] = $and;

        return $this;
    }

    /**
     * Gets or
     *
     * @return \Catalytic\SDK\Model\DataTableSearchClause[]|null
     */
    public function getOr()
    {
        return $this->container['or'];
    }

    /**
     * Sets or
     *
     * @param \Catalytic\SDK\Model\DataTableSearchClause[]|null $or or
     *
     * @return $this
     */
    public function setOr($or)
    {
        $this->container['or'] = $or;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Catalytic\SDK\Model\GuidSearchExpression|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Catalytic\SDK\Model\GuidSearchExpression|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Catalytic\SDK\Model\StringSearchExpression|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Catalytic\SDK\Model\StringSearchExpression|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isArchived
     *
     * @return \Catalytic\SDK\Model\BoolSearchExpression|null
     */
    public function getIsArchived()
    {
        return $this->container['isArchived'];
    }

    /**
     * Sets isArchived
     *
     * @param \Catalytic\SDK\Model\BoolSearchExpression|null $isArchived isArchived
     *
     * @return $this
     */
    public function setIsArchived($isArchived)
    {
        $this->container['isArchived'] = $isArchived;

        return $this;
    }

    /**
     * Gets createdByEmail
     *
     * @return \Catalytic\SDK\Model\ExactStringSearchExpression|null
     */
    public function getCreatedByEmail()
    {
        return $this->container['createdByEmail'];
    }

    /**
     * Sets createdByEmail
     *
     * @param \Catalytic\SDK\Model\ExactStringSearchExpression|null $createdByEmail createdByEmail
     *
     * @return $this
     */
    public function setCreatedByEmail($createdByEmail)
    {
        $this->container['createdByEmail'] = $createdByEmail;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \Catalytic\SDK\Model\DateTimeSearchExpression|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \Catalytic\SDK\Model\DateTimeSearchExpression|null $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


