<?php
/**
 * InstanceStep
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * InstanceStep Class Doc Comment
 *
 * @category Class
 * @description Represents a single Step of an Instance
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InstanceStep implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstanceStep';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'instanceId' => 'string',
        'workflowId' => 'string',
        'name' => 'string',
        'teamName' => 'string',
        'position' => 'int',
        'description' => 'string',
        'status' => '\Catalytic\SDK\Model\InstanceStepStatus',
        'assignedToEmail' => 'string',
        'actionTypeId' => 'string',
        'isAutomated' => 'bool',
        'isManual' => 'bool',
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'completedByEmail' => 'string',
        'outputFields' => '\Catalytic\SDK\Model\Field[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'instanceId' => 'uuid',
        'workflowId' => 'uuid',
        'name' => null,
        'teamName' => null,
        'position' => 'int32',
        'description' => null,
        'status' => null,
        'assignedToEmail' => null,
        'actionTypeId' => null,
        'isAutomated' => null,
        'isManual' => null,
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'completedByEmail' => null,
        'outputFields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'instanceId' => 'instanceId',
        'workflowId' => 'workflowId',
        'name' => 'name',
        'teamName' => 'teamName',
        'position' => 'position',
        'description' => 'description',
        'status' => 'status',
        'assignedToEmail' => 'assignedToEmail',
        'actionTypeId' => 'actionTypeId',
        'isAutomated' => 'isAutomated',
        'isManual' => 'isManual',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'completedByEmail' => 'completedByEmail',
        'outputFields' => 'outputFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'instanceId' => 'setInstanceId',
        'workflowId' => 'setWorkflowId',
        'name' => 'setName',
        'teamName' => 'setTeamName',
        'position' => 'setPosition',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'assignedToEmail' => 'setAssignedToEmail',
        'actionTypeId' => 'setActionTypeId',
        'isAutomated' => 'setIsAutomated',
        'isManual' => 'setIsManual',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'completedByEmail' => 'setCompletedByEmail',
        'outputFields' => 'setOutputFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'instanceId' => 'getInstanceId',
        'workflowId' => 'getWorkflowId',
        'name' => 'getName',
        'teamName' => 'getTeamName',
        'position' => 'getPosition',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'assignedToEmail' => 'getAssignedToEmail',
        'actionTypeId' => 'getActionTypeId',
        'isAutomated' => 'getIsAutomated',
        'isManual' => 'getIsManual',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'completedByEmail' => 'getCompletedByEmail',
        'outputFields' => 'getOutputFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['instanceId'] = isset($data['instanceId']) ? $data['instanceId'] : null;
        $this->container['workflowId'] = isset($data['workflowId']) ? $data['workflowId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['teamName'] = isset($data['teamName']) ? $data['teamName'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['assignedToEmail'] = isset($data['assignedToEmail']) ? $data['assignedToEmail'] : null;
        $this->container['actionTypeId'] = isset($data['actionTypeId']) ? $data['actionTypeId'] : null;
        $this->container['isAutomated'] = isset($data['isAutomated']) ? $data['isAutomated'] : null;
        $this->container['isManual'] = isset($data['isManual']) ? $data['isManual'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['completedByEmail'] = isset($data['completedByEmail']) ? $data['completedByEmail'] : null;
        $this->container['outputFields'] = isset($data['outputFields']) ? $data['outputFields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['instanceId'] === null) {
            $invalidProperties[] = "'instanceId' can't be null";
        }
        if ($this->container['workflowId'] === null) {
            $invalidProperties[] = "'workflowId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['teamName'] === null) {
            $invalidProperties[] = "'teamName' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID of this Task
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instanceId
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instanceId'];
    }

    /**
     * Sets instanceId
     *
     * @param string $instanceId Unique ID of this Instance to which this Step belongs
     *
     * @return $this
     */
    public function setInstanceId($instanceId)
    {
        $this->container['instanceId'] = $instanceId;

        return $this;
    }

    /**
     * Gets workflowId
     *
     * @return string
     */
    public function getWorkflowId()
    {
        return $this->container['workflowId'];
    }

    /**
     * Sets workflowId
     *
     * @param string $workflowId Unique ID of the Workflow to which this Step belongs
     *
     * @return $this
     */
    public function setWorkflowId($workflowId)
    {
        $this->container['workflowId'] = $workflowId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name of this Task
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets teamName
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['teamName'];
    }

    /**
     * Sets teamName
     *
     * @param string $teamName The name of the Catalytic team in which this Task exists
     *
     * @return $this
     */
    public function setTeamName($teamName)
    {
        $this->container['teamName'] = $teamName;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position The position of this Task amongst the other Tasks in the Instance
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description or instructions of the Task
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Catalytic\SDK\Model\InstanceStepStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Catalytic\SDK\Model\InstanceStepStatus|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets assignedToEmail
     *
     * @return string|null
     */
    public function getAssignedToEmail()
    {
        return $this->container['assignedToEmail'];
    }

    /**
     * Sets assignedToEmail
     *
     * @param string|null $assignedToEmail The email of the user (if any) that this InstanceStep is assigned to
     *
     * @return $this
     */
    public function setAssignedToEmail($assignedToEmail)
    {
        $this->container['assignedToEmail'] = $assignedToEmail;

        return $this;
    }

    /**
     * Gets actionTypeId
     *
     * @return string|null
     */
    public function getActionTypeId()
    {
        return $this->container['actionTypeId'];
    }

    /**
     * Sets actionTypeId
     *
     * @param string|null $actionTypeId The ID of this action type of this step
     *
     * @return $this
     */
    public function setActionTypeId($actionTypeId)
    {
        $this->container['actionTypeId'] = $actionTypeId;

        return $this;
    }

    /**
     * Gets isAutomated
     *
     * @return bool|null
     */
    public function getIsAutomated()
    {
        return $this->container['isAutomated'];
    }

    /**
     * Sets isAutomated
     *
     * @param bool|null $isAutomated Indicates whether or not this step is an automated action that will be completed without manual intervention.
     *
     * @return $this
     */
    public function setIsAutomated($isAutomated)
    {
        $this->container['isAutomated'] = $isAutomated;

        return $this;
    }

    /**
     * Gets isManual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['isManual'];
    }

    /**
     * Sets isManual
     *
     * @param bool|null $isManual Indicates whether or not this step is manual, to be completed by a person.  This is a convinience property that gets/sets the inverse of Catalytic.Sdk.Entities.InstanceStep.IsAutomated.
     *
     * @return $this
     */
    public function setIsManual($isManual)
    {
        $this->container['isManual'] = $isManual;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate The start date of the step, or null if the step has not started
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The end date of the step, or null if the step has not started
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets completedByEmail
     *
     * @return string|null
     */
    public function getCompletedByEmail()
    {
        return $this->container['completedByEmail'];
    }

    /**
     * Sets completedByEmail
     *
     * @param string|null $completedByEmail The email of the user who completed this step, if any
     *
     * @return $this
     */
    public function setCompletedByEmail($completedByEmail)
    {
        $this->container['completedByEmail'] = $completedByEmail;

        return $this;
    }

    /**
     * Gets outputFields
     *
     * @return \Catalytic\SDK\Model\Field[]|null
     */
    public function getOutputFields()
    {
        return $this->container['outputFields'];
    }

    /**
     * Sets outputFields
     *
     * @param \Catalytic\SDK\Model\Field[]|null $outputFields A collection of the required and optional output fields  that can be set by this InstanceStep when completing it.
     *
     * @return $this
     */
    public function setOutputFields($outputFields)
    {
        $this->container['outputFields'] = $outputFields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


