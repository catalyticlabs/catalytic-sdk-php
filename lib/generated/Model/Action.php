<?php
/**
 * Action
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * Action Class Doc Comment
 *
 * @category Class
 * @description Represents an Action that can be configured within a Workflow.
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Action implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Action';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'teamName' => 'string',
        'referenceName' => 'string',
        'version' => 'int',
        'appId' => 'string',
        'createdByEmail' => 'string',
        'name' => 'string',
        'description' => 'string',
        'tags' => 'string[]',
        'requiredWorkerTags' => 'string[]',
        'inputs' => '\Catalytic\SDK\Model\ActionInputDefinition[]',
        'outputs' => '\Catalytic\SDK\Model\ActionOutputDefinition[]',
        'isPublished' => 'bool',
        'metadata' => 'string',
        'originalActionId' => 'string',
        'helpDocumentPath' => 'string',
        'iconSvg' => 'string',
        'integrationIds' => 'string[]',
        'integrationRequired' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'teamName' => null,
        'referenceName' => null,
        'version' => 'int32',
        'appId' => null,
        'createdByEmail' => null,
        'name' => null,
        'description' => null,
        'tags' => null,
        'requiredWorkerTags' => null,
        'inputs' => null,
        'outputs' => null,
        'isPublished' => null,
        'metadata' => null,
        'originalActionId' => 'uuid',
        'helpDocumentPath' => null,
        'iconSvg' => null,
        'integrationIds' => null,
        'integrationRequired' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'teamName' => 'teamName',
        'referenceName' => 'referenceName',
        'version' => 'version',
        'appId' => 'appId',
        'createdByEmail' => 'createdByEmail',
        'name' => 'name',
        'description' => 'description',
        'tags' => 'tags',
        'requiredWorkerTags' => 'requiredWorkerTags',
        'inputs' => 'inputs',
        'outputs' => 'outputs',
        'isPublished' => 'isPublished',
        'metadata' => 'metadata',
        'originalActionId' => 'originalActionId',
        'helpDocumentPath' => 'helpDocumentPath',
        'iconSvg' => 'iconSvg',
        'integrationIds' => 'integrationIds',
        'integrationRequired' => 'integrationRequired'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'teamName' => 'setTeamName',
        'referenceName' => 'setReferenceName',
        'version' => 'setVersion',
        'appId' => 'setAppId',
        'createdByEmail' => 'setCreatedByEmail',
        'name' => 'setName',
        'description' => 'setDescription',
        'tags' => 'setTags',
        'requiredWorkerTags' => 'setRequiredWorkerTags',
        'inputs' => 'setInputs',
        'outputs' => 'setOutputs',
        'isPublished' => 'setIsPublished',
        'metadata' => 'setMetadata',
        'originalActionId' => 'setOriginalActionId',
        'helpDocumentPath' => 'setHelpDocumentPath',
        'iconSvg' => 'setIconSvg',
        'integrationIds' => 'setIntegrationIds',
        'integrationRequired' => 'setIntegrationRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'teamName' => 'getTeamName',
        'referenceName' => 'getReferenceName',
        'version' => 'getVersion',
        'appId' => 'getAppId',
        'createdByEmail' => 'getCreatedByEmail',
        'name' => 'getName',
        'description' => 'getDescription',
        'tags' => 'getTags',
        'requiredWorkerTags' => 'getRequiredWorkerTags',
        'inputs' => 'getInputs',
        'outputs' => 'getOutputs',
        'isPublished' => 'getIsPublished',
        'metadata' => 'getMetadata',
        'originalActionId' => 'getOriginalActionId',
        'helpDocumentPath' => 'getHelpDocumentPath',
        'iconSvg' => 'getIconSvg',
        'integrationIds' => 'getIntegrationIds',
        'integrationRequired' => 'getIntegrationRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['teamName'] = isset($data['teamName']) ? $data['teamName'] : null;
        $this->container['referenceName'] = isset($data['referenceName']) ? $data['referenceName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['appId'] = isset($data['appId']) ? $data['appId'] : null;
        $this->container['createdByEmail'] = isset($data['createdByEmail']) ? $data['createdByEmail'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['requiredWorkerTags'] = isset($data['requiredWorkerTags']) ? $data['requiredWorkerTags'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['outputs'] = isset($data['outputs']) ? $data['outputs'] : null;
        $this->container['isPublished'] = isset($data['isPublished']) ? $data['isPublished'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['originalActionId'] = isset($data['originalActionId']) ? $data['originalActionId'] : null;
        $this->container['helpDocumentPath'] = isset($data['helpDocumentPath']) ? $data['helpDocumentPath'] : null;
        $this->container['iconSvg'] = isset($data['iconSvg']) ? $data['iconSvg'] : null;
        $this->container['integrationIds'] = isset($data['integrationIds']) ? $data['integrationIds'] : null;
        $this->container['integrationRequired'] = isset($data['integrationRequired']) ? $data['integrationRequired'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique ID of the Action
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets teamName
     *
     * @return string|null
     */
    public function getTeamName()
    {
        return $this->container['teamName'];
    }

    /**
     * Sets teamName
     *
     * @param string|null $teamName The name of the Catalytic team in which this Action was created
     *
     * @return $this
     */
    public function setTeamName($teamName)
    {
        $this->container['teamName'] = $teamName;

        return $this;
    }

    /**
     * Gets referenceName
     *
     * @return string|null
     */
    public function getReferenceName()
    {
        return $this->container['referenceName'];
    }

    /**
     * Sets referenceName
     *
     * @param string|null $referenceName referenceName
     *
     * @return $this
     */
    public function setReferenceName($referenceName)
    {
        $this->container['referenceName'] = $referenceName;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version The version of this action, relative to the first version  referenced by OriginalActionId
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId The AppId string used to reference the action in Workflows
     *
     * @return $this
     */
    public function setAppId($appId)
    {
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets createdByEmail
     *
     * @return string|null
     */
    public function getCreatedByEmail()
    {
        return $this->container['createdByEmail'];
    }

    /**
     * Sets createdByEmail
     *
     * @param string|null $createdByEmail The email of the user who created this action
     *
     * @return $this
     */
    public function setCreatedByEmail($createdByEmail)
    {
        $this->container['createdByEmail'] = $createdByEmail;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The descriptive name of the Action. This is what Builders will see when  searching for or configuring this action in a Workflow.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the Action. Builders can search against this text, and will   see this text in search results when searching for Actions.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets requiredWorkerTags
     *
     * @return string[]|null
     */
    public function getRequiredWorkerTags()
    {
        return $this->container['requiredWorkerTags'];
    }

    /**
     * Sets requiredWorkerTags
     *
     * @param string[]|null $requiredWorkerTags A set of tags which must be present on a worker for an action  of this type to be routed to that worker. For example, if this  includes \"Azure\", then only workers that are also tagged with  \"Azure\" will be assigned tasks of this action type.
     *
     * @return $this
     */
    public function setRequiredWorkerTags($requiredWorkerTags)
    {
        $this->container['requiredWorkerTags'] = $requiredWorkerTags;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \Catalytic\SDK\Model\ActionInputDefinition[]|null
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Catalytic\SDK\Model\ActionInputDefinition[]|null $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets outputs
     *
     * @return \Catalytic\SDK\Model\ActionOutputDefinition[]|null
     */
    public function getOutputs()
    {
        return $this->container['outputs'];
    }

    /**
     * Sets outputs
     *
     * @param \Catalytic\SDK\Model\ActionOutputDefinition[]|null $outputs outputs
     *
     * @return $this
     */
    public function setOutputs($outputs)
    {
        $this->container['outputs'] = $outputs;

        return $this;
    }

    /**
     * Gets isPublished
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['isPublished'];
    }

    /**
     * Sets isPublished
     *
     * @param bool|null $isPublished Indicates whether or not this action is visible to builders when  searching for actions to add to a Workflow
     *
     * @return $this
     */
    public function setIsPublished($isPublished)
    {
        $this->container['isPublished'] = $isPublished;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata A JSON-formatted meta data. This meta data is passed along unmodified to the   action implementation when an action task is executed
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets originalActionId
     *
     * @return string|null
     */
    public function getOriginalActionId()
    {
        return $this->container['originalActionId'];
    }

    /**
     * Sets originalActionId
     *
     * @param string|null $originalActionId Optional original action version that this version replaces.  E.g., if this is the third version of this action, this should  be the ID of the first version
     *
     * @return $this
     */
    public function setOriginalActionId($originalActionId)
    {
        $this->container['originalActionId'] = $originalActionId;

        return $this;
    }

    /**
     * Gets helpDocumentPath
     *
     * @return string|null
     */
    public function getHelpDocumentPath()
    {
        return $this->container['helpDocumentPath'];
    }

    /**
     * Sets helpDocumentPath
     *
     * @param string|null $helpDocumentPath Optional relative path to the markdown help file on the help site  E.g., \"_integrations/sharepoint.md\"
     *
     * @return $this
     */
    public function setHelpDocumentPath($helpDocumentPath)
    {
        $this->container['helpDocumentPath'] = $helpDocumentPath;

        return $this;
    }

    /**
     * Gets iconSvg
     *
     * @return string|null
     */
    public function getIconSvg()
    {
        return $this->container['iconSvg'];
    }

    /**
     * Sets iconSvg
     *
     * @param string|null $iconSvg Optional contents of the SVG Icon for this action  This should be the XML SVG contents, not a URI to the file
     *
     * @return $this
     */
    public function setIconSvg($iconSvg)
    {
        $this->container['iconSvg'] = $iconSvg;

        return $this;
    }

    /**
     * Gets integrationIds
     *
     * @return string[]|null
     */
    public function getIntegrationIds()
    {
        return $this->container['integrationIds'];
    }

    /**
     * Sets integrationIds
     *
     * @param string[]|null $integrationIds Ids of Integration Definitions for which Connections may be attached to executions of this Action
     *
     * @return $this
     */
    public function setIntegrationIds($integrationIds)
    {
        $this->container['integrationIds'] = $integrationIds;

        return $this;
    }

    /**
     * Gets integrationRequired
     *
     * @return bool|null
     */
    public function getIntegrationRequired()
    {
        return $this->container['integrationRequired'];
    }

    /**
     * Sets integrationRequired
     *
     * @param bool|null $integrationRequired Indicates whether an Integration Connection is required when executing this Action
     *
     * @return $this
     */
    public function setIntegrationRequired($integrationRequired)
    {
        $this->container['integrationRequired'] = $integrationRequired;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


