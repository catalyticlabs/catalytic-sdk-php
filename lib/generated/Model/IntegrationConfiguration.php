<?php
/**
 * IntegrationConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Model;

use \ArrayAccess;
use \Catalytic\SDK\ObjectSerializer;

/**
 * IntegrationConfiguration Class Doc Comment
 *
 * @category Class
 * @description Authentication configuration settings for the Integration Definition
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntegrationConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntegrationConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clientId' => 'string',
        'clientSecret' => 'string',
        'tokenPath' => 'string',
        'revokePath' => 'string',
        'site' => 'string',
        'authorizeBaseUrl' => 'string',
        'scopes' => 'string[]',
        'useBodyAuth' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'clientId' => null,
        'clientSecret' => null,
        'tokenPath' => null,
        'revokePath' => null,
        'site' => 'uri',
        'authorizeBaseUrl' => 'uri',
        'scopes' => null,
        'useBodyAuth' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientId' => 'clientId',
        'clientSecret' => 'clientSecret',
        'tokenPath' => 'tokenPath',
        'revokePath' => 'revokePath',
        'site' => 'site',
        'authorizeBaseUrl' => 'authorizeBaseUrl',
        'scopes' => 'scopes',
        'useBodyAuth' => 'useBodyAuth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientId' => 'setClientId',
        'clientSecret' => 'setClientSecret',
        'tokenPath' => 'setTokenPath',
        'revokePath' => 'setRevokePath',
        'site' => 'setSite',
        'authorizeBaseUrl' => 'setAuthorizeBaseUrl',
        'scopes' => 'setScopes',
        'useBodyAuth' => 'setUseBodyAuth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientId' => 'getClientId',
        'clientSecret' => 'getClientSecret',
        'tokenPath' => 'getTokenPath',
        'revokePath' => 'getRevokePath',
        'site' => 'getSite',
        'authorizeBaseUrl' => 'getAuthorizeBaseUrl',
        'scopes' => 'getScopes',
        'useBodyAuth' => 'getUseBodyAuth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['clientSecret'] = isset($data['clientSecret']) ? $data['clientSecret'] : null;
        $this->container['tokenPath'] = isset($data['tokenPath']) ? $data['tokenPath'] : null;
        $this->container['revokePath'] = isset($data['revokePath']) ? $data['revokePath'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['authorizeBaseUrl'] = isset($data['authorizeBaseUrl']) ? $data['authorizeBaseUrl'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['useBodyAuth'] = isset($data['useBodyAuth']) ? $data['useBodyAuth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['clientId'] === null) {
            $invalidProperties[] = "'clientId' can't be null";
        }
        if ($this->container['clientSecret'] === null) {
            $invalidProperties[] = "'clientSecret' can't be null";
        }
        if ($this->container['tokenPath'] === null) {
            $invalidProperties[] = "'tokenPath' can't be null";
        }
        if ($this->container['revokePath'] === null) {
            $invalidProperties[] = "'revokePath' can't be null";
        }
        if ($this->container['site'] === null) {
            $invalidProperties[] = "'site' can't be null";
        }
        if ($this->container['authorizeBaseUrl'] === null) {
            $invalidProperties[] = "'authorizeBaseUrl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientId
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string $clientId Client Id corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets clientSecret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['clientSecret'];
    }

    /**
     * Sets clientSecret
     *
     * @param string $clientSecret Client Secret corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setClientSecret($clientSecret)
    {
        $this->container['clientSecret'] = $clientSecret;

        return $this;
    }

    /**
     * Gets tokenPath
     *
     * @return string
     */
    public function getTokenPath()
    {
        return $this->container['tokenPath'];
    }

    /**
     * Sets tokenPath
     *
     * @param string $tokenPath Token Path corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setTokenPath($tokenPath)
    {
        $this->container['tokenPath'] = $tokenPath;

        return $this;
    }

    /**
     * Gets revokePath
     *
     * @return string
     */
    public function getRevokePath()
    {
        return $this->container['revokePath'];
    }

    /**
     * Sets revokePath
     *
     * @param string $revokePath Token Revoke Path corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setRevokePath($revokePath)
    {
        $this->container['revokePath'] = $revokePath;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string $site The site corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets authorizeBaseUrl
     *
     * @return string
     */
    public function getAuthorizeBaseUrl()
    {
        return $this->container['authorizeBaseUrl'];
    }

    /**
     * Sets authorizeBaseUrl
     *
     * @param string $authorizeBaseUrl The Authorization base url corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setAuthorizeBaseUrl($authorizeBaseUrl)
    {
        $this->container['authorizeBaseUrl'] = $authorizeBaseUrl;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes The scopes corresponding to the custom OAuth application
     *
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets useBodyAuth
     *
     * @return bool|null
     */
    public function getUseBodyAuth()
    {
        return $this->container['useBodyAuth'];
    }

    /**
     * Sets useBodyAuth
     *
     * @param bool|null $useBodyAuth Whether to supply authorization credentials in the body of the request
     *
     * @return $this
     */
    public function setUseBodyAuth($useBodyAuth)
    {
        $this->container['useBodyAuth'] = $useBodyAuth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


