<?php
/**
 * AccessTokensApi
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * The version of the OpenAPI document: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Catalytic\SDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Catalytic\SDK\ApiException;
use Catalytic\SDK\Configuration;
use Catalytic\SDK\HeaderSelector;
use Catalytic\SDK\ObjectSerializer;

/**
 * AccessTokensApi Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccessTokensApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findAccessTokens
     *
     * Find Access Tokens
     *
     * @param  string $query Free text query terms to search all attributes for (optional)
     * @param  string $status Run or task status to search for (optional)
     * @param  string $processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param  string $runId RunID (aka Instance ID) to search for (optional)
     * @param  string $owner Run or task owner to search for (optional)
     * @param  string $category Category of process or run to search for (optional)
     * @param  string $participatingUsers Task assignee to search for (optional)
     * @param  string $startedBefore Latest start date of the task or run to search for (optional)
     * @param  string $startedAfter Earliest start date of the task or run to search for (optional)
     * @param  string $endedBefore Latest end date of the task or run to search for (optional)
     * @param  string $endedAfter Earliest end date of the task or run to search for (optional)
     * @param  string $pageToken The token representing the result page to get (optional)
     * @param  int $pageSize The page size requested (optional)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessTokensPage
     */
    public function findAccessTokens($query = null, $status = null, $processId = null, $runId = null, $owner = null, $category = null, $participatingUsers = null, $startedBefore = null, $startedAfter = null, $endedBefore = null, $endedAfter = null, $pageToken = null, $pageSize = null)
    {
        list($response) = $this->findAccessTokensWithHttpInfo($query, $status, $processId, $runId, $owner, $category, $participatingUsers, $startedBefore, $startedAfter, $endedBefore, $endedAfter, $pageToken, $pageSize);
        return $response;
    }

    /**
     * Operation findAccessTokensWithHttpInfo
     *
     * Find Access Tokens
     *
     * @param  string $query Free text query terms to search all attributes for (optional)
     * @param  string $status Run or task status to search for (optional)
     * @param  string $processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param  string $runId RunID (aka Instance ID) to search for (optional)
     * @param  string $owner Run or task owner to search for (optional)
     * @param  string $category Category of process or run to search for (optional)
     * @param  string $participatingUsers Task assignee to search for (optional)
     * @param  string $startedBefore Latest start date of the task or run to search for (optional)
     * @param  string $startedAfter Earliest start date of the task or run to search for (optional)
     * @param  string $endedBefore Latest end date of the task or run to search for (optional)
     * @param  string $endedAfter Earliest end date of the task or run to search for (optional)
     * @param  string $pageToken The token representing the result page to get (optional)
     * @param  int $pageSize The page size requested (optional)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessTokensPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAccessTokensWithHttpInfo($query = null, $status = null, $processId = null, $runId = null, $owner = null, $category = null, $participatingUsers = null, $startedBefore = null, $startedAfter = null, $endedBefore = null, $endedAfter = null, $pageToken = null, $pageSize = null)
    {
        $request = $this->findAccessTokensRequest($query, $status, $processId, $runId, $owner, $category, $participatingUsers, $startedBefore, $startedAfter, $endedBefore, $endedAfter, $pageToken, $pageSize);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 400:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Catalytic\SDK\Model\AccessTokensPage' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\AccessTokensPage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Catalytic\SDK\Model\AccessTokensPage';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\AccessTokensPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAccessTokensAsync
     *
     * Find Access Tokens
     *
     * @param  string $query Free text query terms to search all attributes for (optional)
     * @param  string $status Run or task status to search for (optional)
     * @param  string $processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param  string $runId RunID (aka Instance ID) to search for (optional)
     * @param  string $owner Run or task owner to search for (optional)
     * @param  string $category Category of process or run to search for (optional)
     * @param  string $participatingUsers Task assignee to search for (optional)
     * @param  string $startedBefore Latest start date of the task or run to search for (optional)
     * @param  string $startedAfter Earliest start date of the task or run to search for (optional)
     * @param  string $endedBefore Latest end date of the task or run to search for (optional)
     * @param  string $endedAfter Earliest end date of the task or run to search for (optional)
     * @param  string $pageToken The token representing the result page to get (optional)
     * @param  int $pageSize The page size requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAccessTokensAsync($query = null, $status = null, $processId = null, $runId = null, $owner = null, $category = null, $participatingUsers = null, $startedBefore = null, $startedAfter = null, $endedBefore = null, $endedAfter = null, $pageToken = null, $pageSize = null)
    {
        return $this->findAccessTokensAsyncWithHttpInfo($query, $status, $processId, $runId, $owner, $category, $participatingUsers, $startedBefore, $startedAfter, $endedBefore, $endedAfter, $pageToken, $pageSize)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAccessTokensAsyncWithHttpInfo
     *
     * Find Access Tokens
     *
     * @param  string $query Free text query terms to search all attributes for (optional)
     * @param  string $status Run or task status to search for (optional)
     * @param  string $processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param  string $runId RunID (aka Instance ID) to search for (optional)
     * @param  string $owner Run or task owner to search for (optional)
     * @param  string $category Category of process or run to search for (optional)
     * @param  string $participatingUsers Task assignee to search for (optional)
     * @param  string $startedBefore Latest start date of the task or run to search for (optional)
     * @param  string $startedAfter Earliest start date of the task or run to search for (optional)
     * @param  string $endedBefore Latest end date of the task or run to search for (optional)
     * @param  string $endedAfter Earliest end date of the task or run to search for (optional)
     * @param  string $pageToken The token representing the result page to get (optional)
     * @param  int $pageSize The page size requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAccessTokensAsyncWithHttpInfo($query = null, $status = null, $processId = null, $runId = null, $owner = null, $category = null, $participatingUsers = null, $startedBefore = null, $startedAfter = null, $endedBefore = null, $endedAfter = null, $pageToken = null, $pageSize = null)
    {
        $returnType = '\Catalytic\SDK\Model\AccessTokensPage';
        $request = $this->findAccessTokensRequest($query, $status, $processId, $runId, $owner, $category, $participatingUsers, $startedBefore, $startedAfter, $endedBefore, $endedAfter, $pageToken, $pageSize);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAccessTokens'
     *
     * @param  string $query Free text query terms to search all attributes for (optional)
     * @param  string $status Run or task status to search for (optional)
     * @param  string $processId Process ID (aka Pushbot ID or Workflow ID) to search for (optional)
     * @param  string $runId RunID (aka Instance ID) to search for (optional)
     * @param  string $owner Run or task owner to search for (optional)
     * @param  string $category Category of process or run to search for (optional)
     * @param  string $participatingUsers Task assignee to search for (optional)
     * @param  string $startedBefore Latest start date of the task or run to search for (optional)
     * @param  string $startedAfter Earliest start date of the task or run to search for (optional)
     * @param  string $endedBefore Latest end date of the task or run to search for (optional)
     * @param  string $endedAfter Earliest end date of the task or run to search for (optional)
     * @param  string $pageToken The token representing the result page to get (optional)
     * @param  int $pageSize The page size requested (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findAccessTokensRequest($query = null, $status = null, $processId = null, $runId = null, $owner = null, $category = null, $participatingUsers = null, $startedBefore = null, $startedAfter = null, $endedBefore = null, $endedAfter = null, $pageToken = null, $pageSize = null)
    {

        $resourcePath = '/api/access-tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($query !== null) {
            if('form' === 'form' && is_array($query)) {
                foreach($query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['query'] = $query;
            }
        }
        // query params
        if ($status !== null) {
            if('form' === 'form' && is_array($status)) {
                foreach($status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status'] = $status;
            }
        }
        // query params
        if ($processId !== null) {
            if('form' === 'form' && is_array($processId)) {
                foreach($processId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['process_id'] = $processId;
            }
        }
        // query params
        if ($runId !== null) {
            if('form' === 'form' && is_array($runId)) {
                foreach($runId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['run_id'] = $runId;
            }
        }
        // query params
        if ($owner !== null) {
            if('form' === 'form' && is_array($owner)) {
                foreach($owner as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['owner'] = $owner;
            }
        }
        // query params
        if ($category !== null) {
            if('form' === 'form' && is_array($category)) {
                foreach($category as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['category'] = $category;
            }
        }
        // query params
        if ($participatingUsers !== null) {
            if('form' === 'form' && is_array($participatingUsers)) {
                foreach($participatingUsers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participating_users'] = $participatingUsers;
            }
        }
        // query params
        if ($startedBefore !== null) {
            if('form' === 'form' && is_array($startedBefore)) {
                foreach($startedBefore as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['started_before'] = $startedBefore;
            }
        }
        // query params
        if ($startedAfter !== null) {
            if('form' === 'form' && is_array($startedAfter)) {
                foreach($startedAfter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['started_after'] = $startedAfter;
            }
        }
        // query params
        if ($endedBefore !== null) {
            if('form' === 'form' && is_array($endedBefore)) {
                foreach($endedBefore as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ended_before'] = $endedBefore;
            }
        }
        // query params
        if ($endedAfter !== null) {
            if('form' === 'form' && is_array($endedAfter)) {
                foreach($endedAfter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ended_after'] = $endedAfter;
            }
        }
        // query params
        if ($pageToken !== null) {
            if('form' === 'form' && is_array($pageToken)) {
                foreach($pageToken as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_token'] = $pageToken;
            }
        }
        // query params
        if ($pageSize !== null) {
            if('form' === 'form' && is_array($pageSize)) {
                foreach($pageSize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page_size'] = $pageSize;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessToken
     *
     * @param  string $id id (required)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessToken
     */
    public function getAccessToken($id)
    {
        list($response) = $this->getAccessTokenWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAccessTokenWithHttpInfo
     *
     * @param  string $id (required)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokenWithHttpInfo($id)
    {
        $request = $this->getAccessTokenRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 401:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Catalytic\SDK\Model\AccessToken' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\AccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Catalytic\SDK\Model\AccessToken';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\AccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokenAsync
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsync($id)
    {
        return $this->getAccessTokenAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessTokenAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsyncWithHttpInfo($id)
    {
        $returnType = '\Catalytic\SDK\Model\AccessToken';
        $request = $this->getAccessTokenRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessToken'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccessTokenRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAccessToken'
            );
        }

        $resourcePath = '/api/access-tokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeAccessToken
     *
     * Revoke Access Token
     *
     * @param  string $id The public Id of the AccessToken (required)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessToken
     */
    public function revokeAccessToken($id)
    {
        list($response) = $this->revokeAccessTokenWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation revokeAccessTokenWithHttpInfo
     *
     * Revoke Access Token
     *
     * @param  string $id The public Id of the AccessToken (required)
     *
     * @throws \Catalytic\SDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\ProblemDetails|\Catalytic\SDK\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeAccessTokenWithHttpInfo($id)
    {
        $request = $this->revokeAccessTokenRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 401:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Catalytic\SDK\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Catalytic\SDK\Model\AccessToken' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Catalytic\SDK\Model\AccessToken', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Catalytic\SDK\Model\AccessToken';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Catalytic\SDK\Model\AccessToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeAccessTokenAsync
     *
     * Revoke Access Token
     *
     * @param  string $id The public Id of the AccessToken (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAccessTokenAsync($id)
    {
        return $this->revokeAccessTokenAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeAccessTokenAsyncWithHttpInfo
     *
     * Revoke Access Token
     *
     * @param  string $id The public Id of the AccessToken (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function revokeAccessTokenAsyncWithHttpInfo($id)
    {
        $returnType = '\Catalytic\SDK\Model\AccessToken';
        $request = $this->revokeAccessTokenRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeAccessToken'
     *
     * @param  string $id The public Id of the AccessToken (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function revokeAccessTokenRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling revokeAccessToken'
            );
        }

        $resourcePath = '/api/access-tokens/{id}:revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
