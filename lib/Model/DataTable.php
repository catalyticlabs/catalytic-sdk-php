<?php
/**
 * DataTable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * OpenAPI spec version: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataTable Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataTable implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataTable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'data_table_id' => 'string',
'reference_name' => 'string',
'name' => 'string',
'team_name' => 'string',
'description' => 'string',
'columns' => '\Swagger\Client\Model\DataTableColumn[]',
'is_archived' => 'bool',
'type' => '\Swagger\Client\Model\DataTableType',
'visibility' => '\Swagger\Client\Model\TableVisibility',
'admin_users' => 'string[]',
'standard_users' => 'string[]',
'read_only_users' => 'string[]',
'row_limit' => 'int',
'column_limit' => 'int',
'cell_limit' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'data_table_id' => 'uuid',
'reference_name' => null,
'name' => null,
'team_name' => null,
'description' => null,
'columns' => null,
'is_archived' => null,
'type' => null,
'visibility' => null,
'admin_users' => null,
'standard_users' => null,
'read_only_users' => null,
'row_limit' => 'int32',
'column_limit' => 'int32',
'cell_limit' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'data_table_id' => 'dataTableId',
'reference_name' => 'referenceName',
'name' => 'name',
'team_name' => 'teamName',
'description' => 'description',
'columns' => 'columns',
'is_archived' => 'isArchived',
'type' => 'type',
'visibility' => 'visibility',
'admin_users' => 'adminUsers',
'standard_users' => 'standardUsers',
'read_only_users' => 'readOnlyUsers',
'row_limit' => 'rowLimit',
'column_limit' => 'columnLimit',
'cell_limit' => 'cellLimit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'data_table_id' => 'setDataTableId',
'reference_name' => 'setReferenceName',
'name' => 'setName',
'team_name' => 'setTeamName',
'description' => 'setDescription',
'columns' => 'setColumns',
'is_archived' => 'setIsArchived',
'type' => 'setType',
'visibility' => 'setVisibility',
'admin_users' => 'setAdminUsers',
'standard_users' => 'setStandardUsers',
'read_only_users' => 'setReadOnlyUsers',
'row_limit' => 'setRowLimit',
'column_limit' => 'setColumnLimit',
'cell_limit' => 'setCellLimit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'data_table_id' => 'getDataTableId',
'reference_name' => 'getReferenceName',
'name' => 'getName',
'team_name' => 'getTeamName',
'description' => 'getDescription',
'columns' => 'getColumns',
'is_archived' => 'getIsArchived',
'type' => 'getType',
'visibility' => 'getVisibility',
'admin_users' => 'getAdminUsers',
'standard_users' => 'getStandardUsers',
'read_only_users' => 'getReadOnlyUsers',
'row_limit' => 'getRowLimit',
'column_limit' => 'getColumnLimit',
'cell_limit' => 'getCellLimit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['data_table_id'] = isset($data['data_table_id']) ? $data['data_table_id'] : null;
        $this->container['reference_name'] = isset($data['reference_name']) ? $data['reference_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team_name'] = isset($data['team_name']) ? $data['team_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['is_archived'] = isset($data['is_archived']) ? $data['is_archived'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['admin_users'] = isset($data['admin_users']) ? $data['admin_users'] : null;
        $this->container['standard_users'] = isset($data['standard_users']) ? $data['standard_users'] : null;
        $this->container['read_only_users'] = isset($data['read_only_users']) ? $data['read_only_users'] : null;
        $this->container['row_limit'] = isset($data['row_limit']) ? $data['row_limit'] : null;
        $this->container['column_limit'] = isset($data['column_limit']) ? $data['column_limit'] : null;
        $this->container['cell_limit'] = isset($data['cell_limit']) ? $data['cell_limit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['team_name'] === null) {
            $invalidProperties[] = "'team_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets data_table_id
     *
     * @return string
     */
    public function getDataTableId()
    {
        return $this->container['data_table_id'];
    }

    /**
     * Sets data_table_id
     *
     * @param string $data_table_id data_table_id
     *
     * @return $this
     */
    public function setDataTableId($data_table_id)
    {
        $this->container['data_table_id'] = $data_table_id;

        return $this;
    }

    /**
     * Gets reference_name
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['reference_name'];
    }

    /**
     * Sets reference_name
     *
     * @param string $reference_name reference_name
     *
     * @return $this
     */
    public function setReferenceName($reference_name)
    {
        $this->container['reference_name'] = $reference_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team_name
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['team_name'];
    }

    /**
     * Sets team_name
     *
     * @param string $team_name team_name
     *
     * @return $this
     */
    public function setTeamName($team_name)
    {
        $this->container['team_name'] = $team_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \Swagger\Client\Model\DataTableColumn[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \Swagger\Client\Model\DataTableColumn[] $columns columns
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived is_archived
     *
     * @return $this
     */
    public function setIsArchived($is_archived)
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\DataTableType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\DataTableType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \Swagger\Client\Model\TableVisibility
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \Swagger\Client\Model\TableVisibility $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets admin_users
     *
     * @return string[]
     */
    public function getAdminUsers()
    {
        return $this->container['admin_users'];
    }

    /**
     * Sets admin_users
     *
     * @param string[] $admin_users admin_users
     *
     * @return $this
     */
    public function setAdminUsers($admin_users)
    {
        $this->container['admin_users'] = $admin_users;

        return $this;
    }

    /**
     * Gets standard_users
     *
     * @return string[]
     */
    public function getStandardUsers()
    {
        return $this->container['standard_users'];
    }

    /**
     * Sets standard_users
     *
     * @param string[] $standard_users standard_users
     *
     * @return $this
     */
    public function setStandardUsers($standard_users)
    {
        $this->container['standard_users'] = $standard_users;

        return $this;
    }

    /**
     * Gets read_only_users
     *
     * @return string[]
     */
    public function getReadOnlyUsers()
    {
        return $this->container['read_only_users'];
    }

    /**
     * Sets read_only_users
     *
     * @param string[] $read_only_users read_only_users
     *
     * @return $this
     */
    public function setReadOnlyUsers($read_only_users)
    {
        $this->container['read_only_users'] = $read_only_users;

        return $this;
    }

    /**
     * Gets row_limit
     *
     * @return int
     */
    public function getRowLimit()
    {
        return $this->container['row_limit'];
    }

    /**
     * Sets row_limit
     *
     * @param int $row_limit row_limit
     *
     * @return $this
     */
    public function setRowLimit($row_limit)
    {
        $this->container['row_limit'] = $row_limit;

        return $this;
    }

    /**
     * Gets column_limit
     *
     * @return int
     */
    public function getColumnLimit()
    {
        return $this->container['column_limit'];
    }

    /**
     * Sets column_limit
     *
     * @param int $column_limit column_limit
     *
     * @return $this
     */
    public function setColumnLimit($column_limit)
    {
        $this->container['column_limit'] = $column_limit;

        return $this;
    }

    /**
     * Gets cell_limit
     *
     * @return int
     */
    public function getCellLimit()
    {
        return $this->container['cell_limit'];
    }

    /**
     * Sets cell_limit
     *
     * @param int $cell_limit cell_limit
     *
     * @return $this
     */
    public function setCellLimit($cell_limit)
    {
        $this->container['cell_limit'] = $cell_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
