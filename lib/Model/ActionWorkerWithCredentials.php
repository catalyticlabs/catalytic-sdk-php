<?php
/**
 * ActionWorkerWithCredentials
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * OpenAPI spec version: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Catalytic\Client\Model;

use \ArrayAccess;
use \Catalytic\Client\ObjectSerializer;

/**
 * ActionWorkerWithCredentials Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionWorkerWithCredentials implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActionWorkerWithCredentials';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'secret_key' => 'string',
'id' => 'string',
'action_worker_id' => 'string',
'team_name' => 'string',
'name' => 'string',
'description' => 'string',
'tags' => 'string[]',
'hostname' => 'string',
'ip_address' => 'string',
'implemented_action_ids' => 'string[]',
'last_seen_time' => '\DateTime',
'meta_data' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'secret_key' => null,
'id' => 'uuid',
'action_worker_id' => 'uuid',
'team_name' => null,
'name' => null,
'description' => null,
'tags' => null,
'hostname' => null,
'ip_address' => null,
'implemented_action_ids' => 'uuid',
'last_seen_time' => 'date-time',
'meta_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'secret_key' => 'secretKey',
'id' => 'id',
'action_worker_id' => 'actionWorkerId',
'team_name' => 'teamName',
'name' => 'name',
'description' => 'description',
'tags' => 'tags',
'hostname' => 'hostname',
'ip_address' => 'ipAddress',
'implemented_action_ids' => 'implementedActionIds',
'last_seen_time' => 'lastSeenTime',
'meta_data' => 'metaData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'secret_key' => 'setSecretKey',
'id' => 'setId',
'action_worker_id' => 'setActionWorkerId',
'team_name' => 'setTeamName',
'name' => 'setName',
'description' => 'setDescription',
'tags' => 'setTags',
'hostname' => 'setHostname',
'ip_address' => 'setIpAddress',
'implemented_action_ids' => 'setImplementedActionIds',
'last_seen_time' => 'setLastSeenTime',
'meta_data' => 'setMetaData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'secret_key' => 'getSecretKey',
'id' => 'getId',
'action_worker_id' => 'getActionWorkerId',
'team_name' => 'getTeamName',
'name' => 'getName',
'description' => 'getDescription',
'tags' => 'getTags',
'hostname' => 'getHostname',
'ip_address' => 'getIpAddress',
'implemented_action_ids' => 'getImplementedActionIds',
'last_seen_time' => 'getLastSeenTime',
'meta_data' => 'getMetaData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['secret_key'] = isset($data['secret_key']) ? $data['secret_key'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['action_worker_id'] = isset($data['action_worker_id']) ? $data['action_worker_id'] : null;
        $this->container['team_name'] = isset($data['team_name']) ? $data['team_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['implemented_action_ids'] = isset($data['implemented_action_ids']) ? $data['implemented_action_ids'] : null;
        $this->container['last_seen_time'] = isset($data['last_seen_time']) ? $data['last_seen_time'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets secret_key
     *
     * @return string
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string $secret_key secret_key
     *
     * @return $this
     */
    public function setSecretKey($secret_key)
    {
        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets action_worker_id
     *
     * @return string
     */
    public function getActionWorkerId()
    {
        return $this->container['action_worker_id'];
    }

    /**
     * Sets action_worker_id
     *
     * @param string $action_worker_id action_worker_id
     *
     * @return $this
     */
    public function setActionWorkerId($action_worker_id)
    {
        $this->container['action_worker_id'] = $action_worker_id;

        return $this;
    }

    /**
     * Gets team_name
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['team_name'];
    }

    /**
     * Sets team_name
     *
     * @param string $team_name team_name
     *
     * @return $this
     */
    public function setTeamName($team_name)
    {
        $this->container['team_name'] = $team_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets implemented_action_ids
     *
     * @return string[]
     */
    public function getImplementedActionIds()
    {
        return $this->container['implemented_action_ids'];
    }

    /**
     * Sets implemented_action_ids
     *
     * @param string[] $implemented_action_ids implemented_action_ids
     *
     * @return $this
     */
    public function setImplementedActionIds($implemented_action_ids)
    {
        $this->container['implemented_action_ids'] = $implemented_action_ids;

        return $this;
    }

    /**
     * Gets last_seen_time
     *
     * @return \DateTime
     */
    public function getLastSeenTime()
    {
        return $this->container['last_seen_time'];
    }

    /**
     * Sets last_seen_time
     *
     * @param \DateTime $last_seen_time last_seen_time
     *
     * @return $this
     */
    public function setLastSeenTime($last_seen_time)
    {
        $this->container['last_seen_time'] = $last_seen_time;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return string
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param string $meta_data meta_data
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
