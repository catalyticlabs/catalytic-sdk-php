<?php
/**
 * File
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * OpenAPI spec version: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Catalytic\Client\Model;

use \ArrayAccess;
use \Catalytic\Client\ObjectSerializer;

/**
 * File Class Doc Comment
 *
 * @category Class
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class File implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'File';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'team_name' => 'string',
'content_type' => 'string',
'size_in_bytes' => 'int',
'display_size' => 'string',
'is_public' => 'bool',
'md5_hash' => 'string',
'reference_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'name' => null,
'team_name' => null,
'content_type' => null,
'size_in_bytes' => 'int32',
'display_size' => null,
'is_public' => null,
'md5_hash' => null,
'reference_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'team_name' => 'teamName',
'content_type' => 'contentType',
'size_in_bytes' => 'sizeInBytes',
'display_size' => 'displaySize',
'is_public' => 'isPublic',
'md5_hash' => 'md5Hash',
'reference_name' => 'referenceName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'team_name' => 'setTeamName',
'content_type' => 'setContentType',
'size_in_bytes' => 'setSizeInBytes',
'display_size' => 'setDisplaySize',
'is_public' => 'setIsPublic',
'md5_hash' => 'setMd5Hash',
'reference_name' => 'setReferenceName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'team_name' => 'getTeamName',
'content_type' => 'getContentType',
'size_in_bytes' => 'getSizeInBytes',
'display_size' => 'getDisplaySize',
'is_public' => 'getIsPublic',
'md5_hash' => 'getMd5Hash',
'reference_name' => 'getReferenceName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team_name'] = isset($data['team_name']) ? $data['team_name'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['size_in_bytes'] = isset($data['size_in_bytes']) ? $data['size_in_bytes'] : null;
        $this->container['display_size'] = isset($data['display_size']) ? $data['display_size'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['md5_hash'] = isset($data['md5_hash']) ? $data['md5_hash'] : null;
        $this->container['reference_name'] = isset($data['reference_name']) ? $data['reference_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team_name
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['team_name'];
    }

    /**
     * Sets team_name
     *
     * @param string $team_name team_name
     *
     * @return $this
     */
    public function setTeamName($team_name)
    {
        $this->container['team_name'] = $team_name;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets size_in_bytes
     *
     * @return int
     */
    public function getSizeInBytes()
    {
        return $this->container['size_in_bytes'];
    }

    /**
     * Sets size_in_bytes
     *
     * @param int $size_in_bytes size_in_bytes
     *
     * @return $this
     */
    public function setSizeInBytes($size_in_bytes)
    {
        $this->container['size_in_bytes'] = $size_in_bytes;

        return $this;
    }

    /**
     * Gets display_size
     *
     * @return string
     */
    public function getDisplaySize()
    {
        return $this->container['display_size'];
    }

    /**
     * Sets display_size
     *
     * @param string $display_size display_size
     *
     * @return $this
     */
    public function setDisplaySize($display_size)
    {
        $this->container['display_size'] = $display_size;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public is_public
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets md5_hash
     *
     * @return string
     */
    public function getMd5Hash()
    {
        return $this->container['md5_hash'];
    }

    /**
     * Sets md5_hash
     *
     * @param string $md5_hash md5_hash
     *
     * @return $this
     */
    public function setMd5Hash($md5_hash)
    {
        $this->container['md5_hash'] = $md5_hash;

        return $this;
    }

    /**
     * Gets reference_name
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['reference_name'];
    }

    /**
     * Sets reference_name
     *
     * @param string $reference_name reference_name
     *
     * @return $this
     */
    public function setReferenceName($reference_name)
    {
        $this->container['reference_name'] = $reference_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
