<?php
/**
 * Instance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * OpenAPI spec version: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Instance Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Instance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'pushbot_id' => 'string',
'name' => 'string',
'team_name' => 'string',
'description' => 'string',
'category' => 'string',
'steps' => '\Swagger\Client\Model\InstanceStep[]',
'fields' => '\Swagger\Client\Model\Field[]',
'status' => '\Swagger\Client\Model\InstanceStatus',
'field_visibility' => '\Swagger\Client\Model\FieldVisibility',
'visibility' => '\Swagger\Client\Model\InstanceVisibilty',
'admin_users' => 'string[]',
'standard_users' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'pushbot_id' => 'uuid',
'name' => null,
'team_name' => null,
'description' => null,
'category' => null,
'steps' => null,
'fields' => null,
'status' => null,
'field_visibility' => null,
'visibility' => null,
'admin_users' => null,
'standard_users' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'pushbot_id' => 'pushbotId',
'name' => 'name',
'team_name' => 'teamName',
'description' => 'description',
'category' => 'category',
'steps' => 'steps',
'fields' => 'fields',
'status' => 'status',
'field_visibility' => 'fieldVisibility',
'visibility' => 'visibility',
'admin_users' => 'adminUsers',
'standard_users' => 'standardUsers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'pushbot_id' => 'setPushbotId',
'name' => 'setName',
'team_name' => 'setTeamName',
'description' => 'setDescription',
'category' => 'setCategory',
'steps' => 'setSteps',
'fields' => 'setFields',
'status' => 'setStatus',
'field_visibility' => 'setFieldVisibility',
'visibility' => 'setVisibility',
'admin_users' => 'setAdminUsers',
'standard_users' => 'setStandardUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'pushbot_id' => 'getPushbotId',
'name' => 'getName',
'team_name' => 'getTeamName',
'description' => 'getDescription',
'category' => 'getCategory',
'steps' => 'getSteps',
'fields' => 'getFields',
'status' => 'getStatus',
'field_visibility' => 'getFieldVisibility',
'visibility' => 'getVisibility',
'admin_users' => 'getAdminUsers',
'standard_users' => 'getStandardUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pushbot_id'] = isset($data['pushbot_id']) ? $data['pushbot_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team_name'] = isset($data['team_name']) ? $data['team_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['field_visibility'] = isset($data['field_visibility']) ? $data['field_visibility'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['admin_users'] = isset($data['admin_users']) ? $data['admin_users'] : null;
        $this->container['standard_users'] = isset($data['standard_users']) ? $data['standard_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['pushbot_id'] === null) {
            $invalidProperties[] = "'pushbot_id' can't be null";
        }
        if ($this->container['team_name'] === null) {
            $invalidProperties[] = "'team_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pushbot_id
     *
     * @return string
     */
    public function getPushbotId()
    {
        return $this->container['pushbot_id'];
    }

    /**
     * Sets pushbot_id
     *
     * @param string $pushbot_id pushbot_id
     *
     * @return $this
     */
    public function setPushbotId($pushbot_id)
    {
        $this->container['pushbot_id'] = $pushbot_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team_name
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->container['team_name'];
    }

    /**
     * Sets team_name
     *
     * @param string $team_name team_name
     *
     * @return $this
     */
    public function setTeamName($team_name)
    {
        $this->container['team_name'] = $team_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Swagger\Client\Model\InstanceStep[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Swagger\Client\Model\InstanceStep[] $steps steps
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\Field[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\Field[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\InstanceStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\InstanceStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets field_visibility
     *
     * @return \Swagger\Client\Model\FieldVisibility
     */
    public function getFieldVisibility()
    {
        return $this->container['field_visibility'];
    }

    /**
     * Sets field_visibility
     *
     * @param \Swagger\Client\Model\FieldVisibility $field_visibility field_visibility
     *
     * @return $this
     */
    public function setFieldVisibility($field_visibility)
    {
        $this->container['field_visibility'] = $field_visibility;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \Swagger\Client\Model\InstanceVisibilty
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \Swagger\Client\Model\InstanceVisibilty $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets admin_users
     *
     * @return string[]
     */
    public function getAdminUsers()
    {
        return $this->container['admin_users'];
    }

    /**
     * Sets admin_users
     *
     * @param string[] $admin_users admin_users
     *
     * @return $this
     */
    public function setAdminUsers($admin_users)
    {
        $this->container['admin_users'] = $admin_users;

        return $this;
    }

    /**
     * Gets standard_users
     *
     * @return string[]
     */
    public function getStandardUsers()
    {
        return $this->container['standard_users'];
    }

    /**
     * Sets standard_users
     *
     * @param string[] $standard_users standard_users
     *
     * @return $this
     */
    public function setStandardUsers($standard_users)
    {
        $this->container['standard_users'] = $standard_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
