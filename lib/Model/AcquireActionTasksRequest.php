<?php
/**
 * AcquireActionTasksRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalytic SDK API
 *
 * ## API for the Catalytic SDK
 *
 * OpenAPI spec version: v1.0.0
 * Contact: developers@catalytic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Catalytic\Client\Model;

use \ArrayAccess;
use \Catalytic\Client\ObjectSerializer;

/**
 * AcquireActionTasksRequest Class Doc Comment
 *
 * @category Class
 * @description Represents a request by an action worker to acquire tasks to execute
 * @package  Catalytic\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcquireActionTasksRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AcquireActionTasksRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'max_task_count' => 'int',
'lock_duration_seconds' => 'int',
'wait_time_millis' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'max_task_count' => 'int32',
'lock_duration_seconds' => 'int32',
'wait_time_millis' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_task_count' => 'maxTaskCount',
'lock_duration_seconds' => 'lockDurationSeconds',
'wait_time_millis' => 'waitTimeMillis'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_task_count' => 'setMaxTaskCount',
'lock_duration_seconds' => 'setLockDurationSeconds',
'wait_time_millis' => 'setWaitTimeMillis'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_task_count' => 'getMaxTaskCount',
'lock_duration_seconds' => 'getLockDurationSeconds',
'wait_time_millis' => 'getWaitTimeMillis'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_task_count'] = isset($data['max_task_count']) ? $data['max_task_count'] : null;
        $this->container['lock_duration_seconds'] = isset($data['lock_duration_seconds']) ? $data['lock_duration_seconds'] : null;
        $this->container['wait_time_millis'] = isset($data['wait_time_millis']) ? $data['wait_time_millis'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_task_count
     *
     * @return int
     */
    public function getMaxTaskCount()
    {
        return $this->container['max_task_count'];
    }

    /**
     * Sets max_task_count
     *
     * @param int $max_task_count The maximum number of tasks to acquire. Defaults to 1. Must be between  1 and 100 inclusive.
     *
     * @return $this
     */
    public function setMaxTaskCount($max_task_count)
    {
        $this->container['max_task_count'] = $max_task_count;

        return $this;
    }

    /**
     * Gets lock_duration_seconds
     *
     * @return int
     */
    public function getLockDurationSeconds()
    {
        return $this->container['lock_duration_seconds'];
    }

    /**
     * Sets lock_duration_seconds
     *
     * @param int $lock_duration_seconds The number of seconds to lock acquired tasks to this worker.
     *
     * @return $this
     */
    public function setLockDurationSeconds($lock_duration_seconds)
    {
        $this->container['lock_duration_seconds'] = $lock_duration_seconds;

        return $this;
    }

    /**
     * Gets wait_time_millis
     *
     * @return int
     */
    public function getWaitTimeMillis()
    {
        return $this->container['wait_time_millis'];
    }

    /**
     * Sets wait_time_millis
     *
     * @param int $wait_time_millis The number of milliseconds to wait for tasks to be available to acquire.
     *
     * @return $this
     */
    public function setWaitTimeMillis($wait_time_millis)
    {
        $this->container['wait_time_millis'] = $wait_time_millis;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
